
@inproceedings{babukaruppiah_deterministic_2011,
  title = {Deterministic {{Finite Automata}} for pattern matching in {{FPGA}} for intrusion detection},
  doi = {10.1109/ICCCET.2011.5762461},
  abstract = {Intrusion detection has been at the center of intense research in the last decade owing to the rapid increase of sophisticated attacks on computer systems. Network Intrusion Detection Systems (NIDS) detect and prevent numerous security threats in network traffic. Recent Network Intrusion Detection Systems (NIDS) use regular expressions to represent suspicious or malicious character sequences in packet payloads in a more efficient way. They require high-speed packet processing providing a challenging case study for pattern matching using regular expressions. This paper presents an efficient method for finding matches to a given regular expression in a given text using FPGAs. This paper introduces a Deterministic Finite Automata (DFA) method of hardware implementation to support regular expressions.},
  timestamp = {2016-01-20T21:18:25Z},
  booktitle = {Computer, {{Communication}} and {{Electrical Technology}} ({{ICCCET}}), 2011 {{International Conference}} on},
  author = {BabuKaruppiah, A. and Rajaram, S.},
  month = mar,
  year = {2011},
  keywords = {Automata,Computers,deterministic automata,deterministic finite automata,Doped fiber amplifiers,field programmable gate arrays,finite automata,FPGA,Hardware,intrusion detection,network intrusion detection system,network traffic,Nondeterministic Finite Automata,packet processing,pattern matching,regular expression,security of data,security threat,telecommunication traffic},
  pages = {167--170}
}

@inproceedings{lenka_comparative_2012,
  title = {A {{Comparative Study}} on {{DFA-Based Pattern Matching}} for {{Deep Packet Inspection}}},
  doi = {10.1109/ICCCT.2012.59},
  abstract = {Most of the network security applications in today's networks are based on Deep Packet Inspection (DPI). It is a form of computer network packet filtering that examines not only the header portion but also the payload part of a packet as it passes through an inspection point, searching for protocol noncompliance, viruses, Spam, intrusions or some predefined criteria to decide if the packet can pass it or it needs to be routed to a different destination. Most of the systems that perform deep packet inspection implement basic string matching algorithms to match packets against large but finite strings. However, there is growing interest in the use of regular expression-based pattern matching, since regular expressions offer superior expressive power. DFA is employed to implement regular expression matching. DFA representations of a regular expression sets in network applications require large amounts of memory, limiting their practical application. This paper presents an analysis of different compact representation of DFA such as D2FA, \ensuremath{\delta}FA, \ensuremath{\delta}2FA.},
  timestamp = {2016-01-20T21:18:27Z},
  booktitle = {Computer and {{Communication Technology}} ({{ICCCT}}), 2012 {{Third International Conference}} on},
  author = {Lenka, Rakesh Kumar and Ranjan, Prabhat},
  month = nov,
  year = {2012},
  keywords = {Automata,computer network packet filtering,computer network security,Computer science,computer viruses,D2FA,deep packet inspection,delta finite automata,DFA,DFA-based pattern matching,Doped fiber amplifiers,DPI,finite automata,Inspection,inspection point,intrusion detection,intrusions,Memory management,network security applications,pattern matching,protocol noncompliance searching,protocols,regular expression-based pattern matching,regular expressions,spam,string matching,string matching algorithms,unsolicited e-mail,virus,Î´2FA},
  pages = {255--260}
}

@inproceedings{mitra,
  address = {Orlando, Florida, USA},
  series = {ANCS '07},
  title = {Compiling {{PCRE}} to {{FPGA}} for {{Accelerating SNORT IDS}}},
  isbn = {978-1-59593-945-6},
  doi = {10.1145/1323548.1323571},
  abstract = {Deep Payload Inspection systems like SNORT and BRO utilize regular expression for their rules due to their high expressibility and compactness. The SNORT IDS system uses the PCRE Engine for regular expression matching on the payload. The software based PCRE Engine utilizes an NFA engine based on certain opcodes which are determined by the regular expression operators in a rule. Each rule in the SNORT ruleset is translated by PCRE compiler into an unique regular expression engine. Since the software based PCRE engine can match the payload with a single regular expression at a time, and needs to do so for multiple rules in the ruleset, the throughput of the SNORT IDS system dwindles as each packet is processed through a multitude of regular expressions.

In this paper we detail our implementation of hardware based regular expression engines for the SNORT IDS by transforming the PCRE opcodes generated by the PCRE compiler from SNORT regular expression rules. Our compiler generates VHDL code corresponding to the opcodes generated for the SNORT regular expression rules. We have tuned our hardware implementation to utilize an NFA based regular expression engine, using greedy quantifiers, in much the same way as the software based PCRE engine. Our system implements a regular expression only once for each new rule in the SNORT ruleset, thus resulting in a fast system that scales well with new updates. We implement two hundred PCRE engines based on a plethora of SNORT IDS rules, and use a Virtex-4 LX200 FPGA, on the SGI RASC RC 100 Blade connected to the SGI ALTIX 4700 supercomputing system as a testbed. We obtain an interface through-put of (12.9 GBits/s) and also a maximum speedup of 353X over software based PCRE execution.},
  timestamp = {2016-02-17T21:10:25Z},
  booktitle = {Proceedings of the 3rd {{ACM}}/{{IEEE Symposium}} on {{Architecture}} for {{Networking}} and {{Communications Systems}}},
  publisher = {{ACM}},
  author = {Mitra, Abhishek and Najjar, Walid and Bhuyan, Laxmi},
  year = {2007},
  keywords = {deep payload inspection,intrusion detection system,nondeterministic nite automata,regular expressions},
  pages = {127--136}
}

@article{paxson_bro_1999,
  title = {Bro: a {{System}} for {{Detecting Network Intruders}} in {{Real-Time}}},
  volume = {31},
  timestamp = {2016-01-20T21:18:28Z},
  number = {23-24},
  journal = {Computer Networks},
  author = {Paxson, Vern},
  year = {1999},
  pages = {2435--2463}
}

@inproceedings{sidhu,
  title = {Fast {{Regular Expression Matching Using FPGAs}}},
  abstract = {This paper presents an efficient method for finding matches to a given regular expression in given text using FPGAs. To match a regular expression of length n, a serial machine requires 0(2\^{}n) memory and takes 0(1) time per text character. The proposed approach reqiures only 0(n\^{}2) space and still process a text character in 0(1) time (one clock cycle).The improvement is due to the Nondetermineistic Finite Automaton (NFA) used to perform the matching. As far as the authors are aware, this is the first prctical use of a nondeterministic state machine on programmable logic. Furthermore, the paper presents a simple, fast algorithm that quickly constructs the NFA for the given regular expression. Fast NFA construction is crucial because the NFA structure depends on the regular expression, which is known only at runtime. Implementations of the algorithm for conventional FPGAs and the self-reconfigurable Gate Array (SRGA) are described. To evaluate performance, the NFA logic was mapped onto the Virtex XCV100 FPGA and the SRGA. Also, the performance of GNU grep for matching regular expressions was evaluated on an 800 MHz Pentium III machine. The proposed approach was faster than best case grep performance in most cases. It was orders of magnitude faster than worst case grep performance. Logic for the largest NFA considered fit in less than a 1000 CLBs while DFA storage for grep in the worst case consumed a few hundred megabytes.},
  timestamp = {2016-02-17T21:11:28Z},
  booktitle = {Field-{{Programmable Custom Computing Machines}}, 2001. {{FCCM}} '01. {{The}} 9th {{Annual IEEE Symposium}} on},
  author = {Sidhu, Reetinder and K.Prasanna, Viktor},
  month = mar,
  year = {2001},
  pages = {227--238}
}

@article{thompson_programming_1968,
  title = {Programming {{Techniques}}: {{Regular Expression Search Algorithm}}},
  volume = {11},
  issn = {0001-0782},
  doi = {10.1145/363347.363387},
  abstract = {A method for locating specific character strings embedded in character text is described and an implementation of this method in the form of a compiler is discussed. The compiler accepts a regular expression as source language and produces an IBM 7094 program as object language. The object program then accepts the text to be searched as input and produces a signal every time an embedded string in the text matches the given regular expression. Examples, problems, and solutions are also presented.},
  timestamp = {2016-01-20T21:18:28Z},
  number = {6},
  journal = {Commun. ACM},
  author = {Thompson, Ken},
  month = jun,
  year = {1968},
  keywords = {match,regular expression,search},
  pages = {419--422}
}

@incollection{vasiliadis_gnort_2008,
  series = {Lecture Notes in Computer Science},
  title = {Gnort: {{High Performance Network Intrusion Detection Using Graphics Processors}}},
  volume = {5230},
  isbn = {978-3-540-87402-7},
  language = {English},
  timestamp = {2016-01-20T21:18:29Z},
  booktitle = {Recent {{Advances}} in {{Intrusion Detection}}},
  publisher = {{Springer Berlin Heidelberg}},
  author = {Vasiliadis, Giorgos and Antonatos, Spiros and Polychronakis, Michalis and Markatos, EvangelosP. and Ioannidis, Sotiris},
  editor = {Lippmann, Richard and Kirda, Engin and Trachtenberg, Ari},
  year = {2008},
  keywords = {GPU,intrusion detection systems,network security,parallel programming,pattern matching,SIMD},
  pages = {116--134}
}

@inproceedings{ArchForCounter,
  title = {Constraint {{Repetition Inspection}} for {{Regular Expression}} on {{FPGA}}},
  doi = {10.1109/HOTI.2008.14},
  abstract = {Recent network intrusion detection systems (NIDS) use regular expressions to represent suspicious or malicious character sequences in packet payloads in a more efficient way. This paper introduces a new basic building block based on non-deterministic finite automata (NFA) hardware implementation to support complex constraint repetitions in regular expressions. This block is a customized counter capable of handling any type of constraint repetition, applicable to any sub-regular expression. We also introduce optimization techniques to reduce the area and improve the overall performance. We have implemented SNORT IDS regular expressions in hardware by taking advantage of the basic NFA building blocks, our proposed counting block and our proposed optimization techniques. We report experimental results for our architecture that verify area saving and performance improvement.},
  timestamp = {2016-02-17T21:22:00Z},
  booktitle = {16th {{IEEE Symposium}} on {{High Performance Interconnects}}, 2008. {{HOTI}} '08},
  author = {Faezipour, M. and Nourani, M.},
  month = aug,
  year = {2008},
  keywords = {Automata,Computer languages,constraint repetition inspection,Counting circuits,Doped fiber amplifiers,field programmable gate arrays,finite automata,FPGA,Hardware,Inspection,Integrated circuit interconnections,Intrusion detection,network intrusion detection system,nondeterministic finite automata,Non-deterministic Finite Automata,Payloads,regular expression,security of data},
  pages = {111--118},
  file = {IEEE Xplore Abstract Record:/home/thomas/.zotero/zotero/vqb76pmg.default/zotero/storage/SDMQBJAP/abs_all.html:;IEEE Xplore Full Text PDF:/home/thomas/.zotero/zotero/vqb76pmg.default/zotero/storage/SMAKJCW4/Faezipour et Nourani - 2008 - Constraint Repetition Inspection for Regular Expre.pdf:application/pdf}
}


